#multi-thread study note

1.AQS(AbstractQueuedSynchronizer)：JDK下提供的一套用于实现基于FIFO等待队列的阻塞锁和相关的同步器的一个同步框架。
JUC中CountDownLatch，Semaphore，ReentrantLock，FutureTask都是基于它实现的。

AQS的核心思想:
如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效工作线程，并且将共享资源设置为锁定状态；如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制在AQS中是使用CLH队列锁来实现的，即将暂时获取不到锁的线程加入到队列中。CLH队列是一个虚拟双向队列，即不存在队列实例，仅存在结点之间的关联关系。AQS将每条请求共享资源的线程封装成一个CLH锁队列的一个结点（Node）来实现锁的分配。

AQS实现：
AQS维护一个volatile int state（代表共享资源）和一个FIFO线程等待队列（多线程争用资源被阻塞时会进入此队列）。
state访问方式有下面三种：
	getState()
	setState()
	compareAndSetState()

AQS定义两种资源共享方式：
	Exclusive，独占：只有一个线程能执行，比如ReentrantLock。
	Share，共享：多个线程可同时执行，比如Semaphore和CountDownLatch。
不同的自定义同步器争用共享资源的方式也不同。自定同步器在实现时只需要实现共享资源state的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队或唤醒出队等）AQS已经在顶层实现好。

自定义同步器实现时主要实现以下几种方法：
isHeldExclusively()：该线程是否正在独占资源，只有用到Condition才需要实现它。
tryAcquire(int)：独占方式，尝试获取资源，成功返回true；失败返回false。
tryRelease(int)：独占方式，尝试释放资源，成功返回true；失败返回false。
tryAcquireShared(int)：共享方式，尝试获取资源，负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。
tryReleaseShared(int)：共享方式，尝试释放资源，成功返回true；失败返回false。
