#multi-thread study note

1.AQS(AbstractQueuedSynchronizer)：JDK下提供的一套用于实现基于FIFO等待队列的阻塞锁和相关的同步器的一个同步框架。
JUC中CountDownLatch，Semaphore，ReentrantLock，FutureTask都是基于它实现的。

AQS的核心思想:
如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效工作线程，并且将共享资源设置为锁定状态；如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制在AQS中是使用CLH队列锁来实现的，即将暂时获取不到锁的线程加入到队列中。CLH队列是一个虚拟双向队列，即不存在队列实例，仅存在结点之间的关联关系。AQS将每条请求共享资源的线程封装成一个CLH锁队列的一个结点（Node）来实现锁的分配。

AQS实现：
AQS维护一个volatile int state（代表共享资源）和一个FIFO线程等待队列（多线程争用资源被阻塞时会进入此队列）。
state访问方式有下面三种：
	getState()
	setState()
	compareAndSetState()

AQS定义两种资源共享方式：
	Exclusive，独占：只有一个线程能执行，比如ReentrantLock。
	Share，共享：多个线程可同时执行，比如Semaphore和CountDownLatch。
不同的自定义同步器争用共享资源的方式也不同。自定同步器在实现时只需要实现共享资源state的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队或唤醒出队等）AQS已经在顶层实现好。

自定义同步器实现时主要实现以下几种方法：
isHeldExclusively()：该线程是否正在独占资源，只有用到Condition才需要实现它。
tryAcquire(int)：独占方式，尝试获取资源，成功返回true；失败返回false。
tryRelease(int)：独占方式，尝试释放资源，成功返回true；失败返回false。
tryAcquireShared(int)：共享方式，尝试获取资源，负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。
tryReleaseShared(int)：共享方式，尝试释放资源，成功返回true；失败返回false。

2.ReentrantLock：可重入锁
state初始化为0，表示未锁定状态。
A线程lock()时，会调用tryAcquire()独占该锁并将state加1。此后，其他线程再尝试获取tryAcquire()时就会失败，直到A线程unlock()到state为0（即释放锁）为止，然后其他线程才有机会获取该锁。
当然，释放锁之前，A线程自己是可以重复获取此锁的，state会累加，这就是可重入的概念。获取多少次就要释放多少次，这样才能保证state是能回到0状态的。

公平锁和非公平锁
公平锁保证了先在队列中的线程先获得锁；
在尝试获取锁的时候多了一个判断，公平锁在尝试获取锁的时候先判断是否有比自己申请早的线程在同步队列中等待，有，则等待；没有就抢占。

3.CountDownLatch
任务分为N个子线程去执行，state初始化为N。这N个子线程是并行执行的，每个子线程执行完后countDown()一次，state会CAS减1。
等到所有子线程都执行完后（即state=0），会unpark()主调用线程，然后主调用线程就会从await()函数返回，继续后续操作。

4.synchronized：Java原生的互斥同步锁，使用方便，无需显式释放锁。底层是通过monitorenter和monitorexit两个字节码指令来实现加锁和解锁操作的
实现：synchronized是Java中最基本的互斥同步手段，编译之后会在同步块的前后添加monitorenter和monitorexit两个字节码指令。
同步块在已经进入的线程执行完之前，会阻塞后面其他的线程，在Java中线程是映射到操作系统的原生线程之上，阻塞线程就会涉及到用户态切换到核心态等等，
所以synchronized也被称为重量级锁。
自旋锁：为了避免线程切换产生的开销进行的空转。
自适应自旋锁：JDK1.6中引入了自适应的自旋锁，意味着自旋时间不再固定了，而是由前一次在同一个锁上的自旋时间及锁的拥有者状态来决定。
轻量级锁：本意是在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。轻量级锁使用CAS操作避免了使用互斥量的开销。
偏向锁：偏向锁也是在JDK1.6中引入的一项锁优化，目的是消除数据在无竞争情况下的同步原语。
轻量级锁是在无竞争情况下使用CAS去消除同步使用的互斥量，偏向锁就是在无竞争情况下把整个同步都消除掉。

5.CAS：compare and swap，比较并进行替换
CAS通过unsafe的方法实现：有三个操作数，内存值V，旧的预期值A，要修改的新值B，当且仅当预期值A和内存值V相同时，将内存值V改为B，否则什么都不做。
CAS是借助CPU底层指令来完成的。
缺点：ABA问题，CAS在操作值的时候，需要检查下值有没有变化，没有发生变化则更新。
但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS检查的时候会发现它的值没有发生变化，但是实际上却发生了变化！
解决方案：ABA解决思路是使用版本号，在变量前追加版本号，每次变量更新的时候把版本号加1。
从JDK1.5开始提供了一个类AtomicStampedReference来解决ABA问题，它通过控制变量值的版本来保证CAS的正確性。

6.CompletableFuture：多功能的非阻塞的Future
将每个任务的计算完成的结果都用CompletableFuture来表示，利用CompletableFuture.allOf汇聚成一个大的CompletableFuture，
那么利用get()方法就可以阻塞

7.Fork/Join
ForkJoinPool中每个线程都有自己的工作队列，并且采用Work-Steal算法防止线程饥饿。 
Worker线程用LIFO的方法取出任务，但是会用FIFO的方法去偷取别人队列的任务，这样就减少了锁的冲突。
