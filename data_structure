1.Map
HashMap(线程不安全)：底层实现是数组加链表的形式，添加数据的时候，首先根据key的hash值来计算在数组中的索引，
当找到的位置有数据存在时，会在当前索引处使用链表来存储hash值相等的数据，查找链表中的数据会通过key的equals方法来判断。
在JDK1.8中改成了采用数组加链表和红黑树的方式实现，当链表长度超过8的时候，链表就转换为红黑树进行存储。

ConcurrentHashMap(线程安全)：采用分段锁实现线程安全，底层实现还是数组和链表的形式。
ConcurrentHashMap中有个Segment数组，这个Segment其实就是一把锁。每个Segment中还是数组和链表的形式，跟HashMap一样。每个Segment是一把锁，
写操作只会锁住一段Segment，其他的Segment不会被锁住，就是利用这种方式来实现并发和线程安全的。
JDK1.8中发生了变化，取消了Segments字段，采用了类似HashMap的数组加链表和红黑树的形式实现，可以实现对每一行数据进行加锁，
利用CAS和synchronized进行高效的同步更新数据。
